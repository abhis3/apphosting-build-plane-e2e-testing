name: Deploy FAH Rollout and Simple Check

on:
  workflow_dispatch: # Allows manual triggering from the Actions tab

jobs:
  deploy_and_simple_check:
    name: Trigger Rollout, Wait, and Check Content
    runs-on: ubuntu-latest
    permissions:
      contents: read # Can read repo content if needed
      id-token: write # Required for google-github-actions/auth using Workload Identity Federation

    # Define constants
    env:
      TARGET_BACKEND: next-js-kitchen-sink
      TARGET_BRANCH: main
      TARGET_URL: https://next-js-kitchen-sink--abhisun-testing-e2e-poc.us-central1.hosted.app
      EXPECTED_PHRASE: "Save and see your changes instantly." # Static phrase to check for
      WAIT_SECONDS: 300 # 5 minutes
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }} # Make project ID available as env var

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use a current LTS version

      - name: Install Firebase CLI and Update gcloud
        run: |
          echo "Installing/Updating Firebase CLI and gcloud..."
          npm install -g firebase-tools@latest
          # Ensure gcloud is available and up-to-date (often pre-installed)
          gcloud components update --quiet || echo "WARN: Failed to update gcloud components."
          # Removed 'gcloud components install alpha' as it's not needed for core commands here
          echo "Install/Update finished."
          echo "Using Firebase CLI version:"
          firebase --version
          echo "Using gcloud CLI version:"
          gcloud --version

      - name: Manually Authenticate using Service Account Key
        id: manual_auth
        run: |
          echo "Attempting manual SA activation..."
          # Write the key from the secret to a temporary file - Use printf for safety
          printf '%s' "${{ secrets.GCP_SA_KEY }}" > gcp_key.json

          # Activate the service account using the key file
          gcloud auth activate-service-account --key-file=gcp_key.json --project=${{ env.GCP_PROJECT_ID }} || \
            (echo "::error::'gcloud auth activate-service-account' command failed! Check GCP_SA_KEY secret content and SA permissions." && rm gcp_key.json && exit 1)

          echo "Manual SA activation command executed."
          # Clean up the temporary key file IMMEDIATELY after use
          rm gcp_key.json

          # Verify activation worked by checking the active account and project
          ACCOUNT=$(gcloud config get-value account)
          PROJECT=$(gcloud config get-value project)
          echo "gcloud account after manual activation: $ACCOUNT"
          echo "gcloud project after manual activation: $PROJECT"
          # Check if the activated account email matches the expected pattern for the project
          if [[ "$ACCOUNT" != *"@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com"* ]]; then
            echo "::error::Manual activation failed or activated wrong account! Expected SA ending in @${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com"
            exit 1
          fi
          if [[ "$PROJECT" != "${{ env.GCP_PROJECT_ID }}" ]]; then
            echo "::error::Manual activation set wrong project! Expected ${{ env.GCP_PROJECT_ID }}"
            exit 1
          fi
          echo "Manual activation successful for $ACCOUNT in project $PROJECT"

      - name: Trigger Firebase App Hosting Rollout
        id: trigger_rollout
        run: |
          echo "Triggering rollout for backend '${{ env.TARGET_BACKEND }}' from branch '${{ env.TARGET_BRANCH }}'..."
          # Project should be set by gcloud auth activate-service-account, but --project adds safety
          firebase apphosting:rollouts:create ${{ env.TARGET_BACKEND }} --git-branch ${{ env.TARGET_BRANCH }} --project ${{ env.GCP_PROJECT_ID }}

          # Optional: Add --debug flag back temporarily if you encounter issues in THIS step
          # firebase apphosting:rollouts:create ${{ env.TARGET_BACKEND }} --git-branch ${{ env.TARGET_BRANCH }} --project ${{ env.GCP_PROJECT_ID }} --debug

          echo "Rollout command initiated."
          # Add Rollout ID capture back here later if needed for polling
          # rollout_id=$(...)
          # echo "rollout_id=$rollout_id" >> $GITHUB_OUTPUT

      - name: Wait Fixed Duration
        run: |
          echo "Waiting for ${{ env.WAIT_SECONDS }} seconds for deployment to stabilize..."
          sleep ${{ env.WAIT_SECONDS }}
          echo "Wait finished."

      - name: Validate Deployed Content
        run: |
          echo "Validating content at ${{ env.TARGET_URL }}"
          echo "Checking for phrase: '${{ env.EXPECTED_PHRASE }}'"

          # Use curl to fetch the page content (-s silent, -L follow redirects, --fail fail on >=400 errors)
          # Add retry logic for transient network issues
          # Pipe output to grep (-q quiet mode, exits 0 if found, 1 if not found)
          if curl -s -L --retry 3 --retry-delay 10 --fail --connect-timeout 15 "${{ env.TARGET_URL }}" | grep -q "${{ env.EXPECTED_PHRASE }}"; then
            echo "Validation successful: Expected phrase found."
            exit 0 # Success
          else
            echo "::error::Validation failed: Expected phrase NOT found at ${{ env.TARGET_URL }}"
            # Optional: Dump first few lines of actual content for debugging
            echo "---- Start of Page Content ----"
            curl -s -L --retry 1 "${{ env.TARGET_URL }}" | head -n 20
            echo "---- End of Page Content ----"
            exit 1 # Failure
          fi